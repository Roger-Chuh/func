function testRectifyTransforms()

R  =[0.9235919069234693, -0.376418471641796, -0.07271261013280055;
0.3768652356484986, 0.8566164966823616, 0.3523929224193355;
-0.07036038391788224, -0.3528701061559234, 0.9330230996906967];
t = [-0.02288843582127878;0.1095292459888009;-0.01892357889914457];
Rl = [0.9817214553706907, -0.1895026180909864, -0.01765621141453061;
0.1891865353945466, 0.9615247119655154, 0.1991950880545014;
-0.02077110710243384, -0.1988944092132667, 0.9798007833704997];
Rr = [0.9793261061244347, 0.2014236948590057, -0.01867814264049165;
-0.201688504312659, 0.9651506976915079, -0.1667509459454968;
-0.01556036925252433, 0.1670707212378688, 0.9858221183427482];
% 表达在没有rectify时左右目的原生坐标系下，relative rotation已经为单位阵了
[Rl' - R'*Rr']

L2R = [R t; 0 0 0 1];
R_new = inv(L2R) * [Rr' [0 0 0]';0 0 0 1];
L_new = [Rl' [0 0 0]';0 0 0 1];
%L_new和R_new也是表达在没有rectify时左右目的原生坐标系下，但他们之间的relative pose已经是
%单位阵+纯y方向上的平移了
L2R_comp = inv(R_new)*L_new


Rl0 = Rl';
Rr0 = Rr';
er = [Rl0 - R'*Rr0];


Rr2 = [ 0.2016885043   0.6414186213    0.740205309
-0.9651506977 0.001489057741   0.2616904917
0.1667509459  -0.7671896343   0.6193659556
];
Rr1 = [ 0.9793261061  -0.1177229372  -0.1645043705
0.2014236949   0.4924033123   0.8467393183
-0.01867814264  -0.8623689976   0.5059356075];
Rl1 = [0.9817214554    0.137518352   0.1315738839
-0.1895026181   0.7704181282   0.6087238006
-0.01765621141   -0.622530811   0.7823960938];
Rl2 = [-0.1891865354  0.6469499788  0.7386908553
-0.961524712 0.03055202203 -0.2730142894
-0.1991950881 -0.7619201394  0.6162783609];
Rl3 = [-0.9817214554 -0.1056951697 -0.1582767044
 0.1895026181 -0.4656942143 -0.8644175244
0.01765621141   -0.87861108  0.4772115132];
Rr3 = [-0.9793261061   0.141562806  0.1445003454
-0.2014236949 -0.7483705076 -0.6319573392
0.01867814264 -0.6479981137  0.7614128786];
Rl4 = [ 0.1891865354 -0.6151267965 -0.7653936759
  0.961524712  0.2741718919 0.01732056567
 0.1991950881 -0.7392217515  0.6433292462];
Rr4 = [-0.2016885043  -0.6175787525  -0.7602093342
  0.9651506977   -0.257456253 -0.04690851261
 -0.1667509459   -0.743177477   0.6479825304];



Rl3_big = [-0.9817214554 -0.04518714988  -0.1848813283
  0.1895026181  -0.1419612111  -0.9715635709
 0.01765621141  -0.9888402985     0.14792945];
Rr3_big = [-0.9793261061 0.08360349532  0.1842032395
-0.2014236949 -0.4870961039 -0.8498034365
0.01867814264 -0.8693375876  0.4938656556];


Rl1_small = [ 0.9817214554   0.1484624728   0.1190876914
 -0.1895026181   0.8205402296   0.5392610586
-0.01765621141  -0.5519715806   0.8336759757];
Rr1_small = [ 0.9793261061  -0.1316124665  -0.1536181517
  0.2014236949   0.5643277633   0.8006014431
-0.01867814264  -0.8149922296   0.5791707803];


Rl3_small = [-0.9817214554 -0.1190876914 -0.1484624728
 0.1895026181 -0.5392610586 -0.8205402296
0.01765621141 -0.8336759757  0.5519715806];
Rr3_small = [-0.9793261061  0.1536181517  0.1316124665
-0.2014236949 -0.8006014431 -0.5643277633
0.01867814264 -0.5791707803  0.8149922296];


Rl1_comp = [1, 1.165561342082491e-16, 4.827913156683533e-17;
 -1.165561342082491e-16, 0.7071067811865486, 0.7071067811865464;
 4.827913156683533e-17, -0.7071067811865464, 0.7071067811865486];

Rr1_comp = [1, 1.165561342082491e-16, 4.827913156683533e-17;
 -1.165561342082491e-16, 0.7071067811865486, 0.7071067811865464;
 4.827913156683533e-17, -0.7071067811865464, 0.7071067811865486];

Rl3_comp = [1, -2.598628565954408e-16, -1.076387195588465e-16;
 2.598628565954408e-16, 0.7071067811865464, 0.7071067811865487;
 -1.076387195588465e-16, -0.7071067811865487, 0.7071067811865464];

Rr3_comp = [1, -2.598628565954408e-16, -1.076387195588465e-16;
 2.598628565954408e-16, 0.7071067811865464, 0.7071067811865487;
 -1.076387195588465e-16, -0.7071067811865487, 0.7071067811865464];

Rl2'*Rl0-(Rr2'*Rr0)


L_new_test0 = [Rl0 [0 0 0]';0 0 0 1];
R_new_test0 = inv(L2R) * [Rr0 [0 0 0]';0 0 0 1];
L2R_comp_test0 = inv(R_new_test0)*L_new_test0

L_new_test1 = [Rl1 [0 0 0]';0 0 0 1];
R_new_test1 = inv(L2R) * [Rr1 [0 0 0]';0 0 0 1];
L2R_comp_test1 = inv(R_new_test1)*L_new_test1

L_new_test1_small = [Rl1_small*Rl1_comp' [0 0 0]';0 0 0 1];
R_new_test1_small = inv(L2R) * [Rr1_small*Rr1_comp' [0 0 0]';0 0 0 1];
L2R_comp_test1_small = inv(R_new_test1_small)*L_new_test1_small


L_new_test2 = [Rl2 [0 0 0]';0 0 0 1];
R_new_test2 = inv(L2R) * [Rr2 [0 0 0]';0 0 0 1];
L2R_comp_test2 = inv(R_new_test2)*L_new_test2

L_new_test3 = [Rl3 [0 0 0]';0 0 0 1];
R_new_test3 = inv(L2R) * [Rr3 [0 0 0]';0 0 0 1];
L2R_comp_test3 = inv(R_new_test3)*L_new_test3



L_new_test3_small = [Rl3_small [0 0 0]';0 0 0 1];
R_new_test3_small = inv(L2R) * [Rr3_small [0 0 0]';0 0 0 1];
L2R_comp_test3_small = inv(R_new_test3_small)*L_new_test3_small

L_new_test3_small_comp = [Rl3_small*Rl3_comp' [0 0 0]';0 0 0 1];
R_new_test3_small_comp = inv(L2R) * [Rr3_small*Rr3_comp' [0 0 0]';0 0 0 1];
L2R_comp_test3_small_comp = inv(R_new_test3_small_comp)*L_new_test3_small_comp

L_new_test3_big = [Rl3_big [0 0 0]';0 0 0 1];
R_new_test3_big = inv(L2R) * [Rr3_big [0 0 0]';0 0 0 1];
L2R_comp_test3_big = inv(R_new_test3_big)*L_new_test3_big

L_new_test4 = [Rl4 [0 0 0]';0 0 0 1];
R_new_test4 = inv(L2R) * [Rr4 [0 0 0]';0 0 0 1];
L2R_comp_test4 = inv(R_new_test4)*L_new_test4
end